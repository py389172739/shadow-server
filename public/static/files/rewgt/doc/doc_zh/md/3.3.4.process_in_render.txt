3.3.4 render 处理顺序
---------------------

&nbsp;

定义 WTC 类时，若无特别需求您不必定制 render 函数，因为 Shadow Widget 设计时，已尽量将 render 定制的需求，转化为对单项属性实施控制，或提供可配置的子构件组装机制。

#### render 调用的处理过程

render 函数被调用后，依次处理：

1. 注册自动 duals 属性并赋初始（仅在首次 render 调用时），包括：   
把 `props.name` 注册为 `duals.name`，把 `props['data-test']` 注册为 `duals['data-test'] `，把 `props['dual-data']` 注册为 `duals.data`，编译可计算属性的表达式并注册为 duals 属性。

2. 如果有 duals 属性延缓赋值，依次触发它们的 setter 函数，对于可计算属性，用 MJI 解释器重新计算表达式

3. 处理由 `childNumId` 变化驱动的子构件组装过程

4. 分析处理 `width, height, margin, padding` 等属性，结果更新到 state.style

5. 组织 props 定义，通过 `React.createElement(tagName,props,gui.comps)` 实现 render 输出

其中，`duals.childNumId` 在每次 `render()` 调用时都重新计算，当其值有变化时，它的 setter 函数自动被调用，同时 listen 它的相关函数自动被触发，当然，如果其值没有变化，就不会触发它的 setter 与 listen 动作。

#### childNumId 如何算得？

childNumId 用于表达当前构件的子成员有无增删，构件 comp 用 `comp.$gui.comps` （简写为 `gui.comps`）记录它的子成员，`render()` 依据 `gui.comps`（而不是 `props.children`）组织输出，自行组装子构件就是自行安装 `gui.comps` 的 array 成员值。

求得 childNumId 值的算法如下：

``` js
    duals.childNumId = gui.comps.length + (gui.removeNum << 16);
```

其中，`gui.removeNum` 记录被删子构件的累计总数，`gui.comp` 则记录即将 render 输出的各个子构件，每新增一个子构件，`gui.comp.length` 会变化，而删除一个子构件时，`gui.removeNum` 会累加 1，综合这两种变化，表达式 “`gui.comps.length + (gui.removeNum << 16)`” 就正确表达了当前构件的子成员是否变动过。

当我们用一个 array 变量 `children` 记录新的子成员列表，然调用 `utils.setChildren(comp,children)` 让新列表替换旧列表，这时，`utils.setChildren` 函数会对比 `gui.comps` 旧值，自动更新 `gui.removeNum` 取值，刷新输出时，自动驱动 `duals.childNumId` 相关的 setter 与 listen 动作。

注意：修改已存在子构件的属性（即 key 值未变），并不导致 `duals.childNumId` 值变化，因为你并未增加或删除子构件。

#### 一个例子

样例 sample_dev2 从一个 json 文件读取一个数组，保存到 `duals.data`，然后将数组内容用多个 `<li>` 节点展示到界面。其中，定义 `duals.id__` 的 setter 函数如下：

``` js
  this.defineDual('id__', function(value,oldValue) {
    if (value <= 2) return;
    
    var b = this.duals.data;
    if (!Array.isArray(b)) return;
    
    var children = [];
    b.forEach( function(item,idx) {
      var dProp = {key:item.weekDay,'data-idx':idx+''};
      var bItem = [ ['Li',dProp],
        ['Span',{'html.':item.weekDay+': '+item.income}],
      ];
      if (item.income >= 30) dProp.style = {color:'red'}; // pick out some large data
      children.push(utils.loadElement(bItem));
    });
    
    utils.setChildren(this,children);
  });
```

上述处理方式比较通用，我们应在 `duals.id__` 的 setter 函数中组装子构件，而尽量不重定义（重载）`render()` 函数。

上面 `"if (value <= 2) return"` 一句用于兼容 idSetter 定义，将在后文 [即时定义双源 setter](#3.4.3.) 介绍。

#### id__ 与 childNumId 的触发顺序

构件每次 `render()` 调用时，在组织界面输出之前，先更新各个双源属性的值。`id__` 与 `childNumId` 固定作为最后两个双源属性，自动尝试更新，而且，`childNumId` 要在 `id__` 之后更新。我们在 `id__` 的 setter 函数对 `gui.comps` 组装完毕，若有子成员增删，随后驱动 `duals.childNumId` 变化，所以，`childNumId` 的 `setter` 调用发生在 id__ 的 `setter()` 调用之后，又在界面组织输出之前。

须强调一下，组装子成员必须在 `id__` 的 setter 函数中进行，不能在 listen 该 `id__` 的侦听函数中进行。因为侦听函数要延后一个周期才被调用。另外，给 `duals.childNumId` 赋值由系统接管，你不应对它赋值。

本节介绍的 `duals.childNumId` 在封装中间件（即，您要自定义若干 WTC 类供他人使用）时才用到，如果不自行定义 WTC 类，本节内容稍作了解即可。

&nbsp;
