3.3.2 如何新定义构件类
----------------------

&nbsp;

#### 创建一个 WTC 的过程

新建一个 WTC 类，先要找一个合适的 WTC 基类，继承它定义新的 WTC 类，然后再把新定义 WTC 类及其类实例登记到 T 模块。

下面举一个简单例子，一些常用的语句用注释标出，随后有解释。

``` js
var React = require('react');
var ReactDOM = require('react-dom');
var W = require('shadow-widget');

var T = W.$templates, utils = W.$utils, ex = W.$ex;

class THighlightBtn_ extends T.Button_ {
  constructor(name,desc) {
    super(name || 'HighlightBtn',desc);
    // this._statedProp.push(...);
    // this._silentProp.push(...);
    // this._defaultProp.attr = value;
  }

  getDefaultProps() {
    var props = super.getDefaultProps();
    // props.attr = value;
    return props;
  }

  getInitialState() {
    var state = super.getInitialState();

    // this.defineDual('attr', function(value,oldValue) {
    //   ...
    // },initValue);

    return state;
  }

  componentDidMount() {
    super.componentDidMount();
    // initial process, such as regist listen, fetch ajax data, etc
  }

  $onMouseOver(event) {
    this.duals.style = {opacity:'0.6'};
  }

  $onMouseOut(event) {
    this.duals.style = {opacity:''};
  }
}

T.HighlightBtn_ = THighlightBtn_;
T.HighlightBtn = new THighlightBtn_();
```

定义 `getInitialState, componentDidMount, componentWillUnmount` 等 React 内置的方法，类似于投影类定义，差别仅在于，在 WTC 中用 `super.method` 调用基类的同名函数，而投影类定义中，要用带 `'_'` 前缀的 “实例方法” 的方式。这些类方法均可缺省，缺省时自动采用基类的同名函数。定义事件函数与投影类中的要求一样，没什么特殊的。

新定义的 WTC 类定义及其实例（用 `new` 创建一个）要登记到 T 模块，如上例最后两行代码，其中类实例供转义标签引用，类定义则可用作其它 WTC 类的基类。

#### 服务于产品开发的内置属性

在 WTC 的 constructor 方法中，可定制如下属性的值：

```
    _className
    _classDesc
    _statedProp
    _silentProp
    _defaultProp
    _htmlText
```

其中，`_className` 指示当前 WTC 类名，`_classDesc` 是附加描述，这两者用在可视化编辑界面，提示用户选中的构件是什么。如上例，通常我们简单调一下 `super(name || 'HighlightBtn',desc)` 即可，转由基类的 constructor 用 `name` 与 `desc` 参数设置 `_className` 与 `_classDesc`。`_className` 用于指示该类定义在 T 模块下的位置，比如 WTC 类实例是 `T.usr.Submit`，应这么调用基类的 constructor 函数：`super(name || 'usr.Submit',desc)` 。

`_statedProp` 是 array 数组，列出若干个界面设计时 “可记忆状态值” 的属性，比如 width 指示构件宽度，在可视化界面设计中，用鼠标拖拉能改变它的宽度，设计态的宽度值被记忆，存盘时使用该值。

`_silentProp` 也是 array 数组，列出若干个不必导出保存的属性，比如 `className` 属性在构件创建时自动设置，不必导出存盘，还有一些内部使用的属性（通常以点号为后缀，如 `"keyid."`）也不必导出保存。

`_defaultProp` 用 `key: value` 对指明各项属性的缺省值，比如 `TPanel.props.width` 的缺省值是 0.9999，在 `getDefaultProps` 中我们指定 width 缺省值为 0.9999，此构件导出时，如果 `width` 要保存的值也是 0.9999（即：与 `_defaultProp` 中 `width` 指定的值恒等），这个 width 属性就不必保存，`_defaultProp` 专用于降低界面输出保存的文本容量。

`_htmlText` 指示是否使用 `'html.'` 属性，取值为 `true` 或 `false`，比如 Panel 类构件该属性设为 `false`，大部分 P 类与 Span 类构件的 `_htmlText` 设为 `true`。

以上 6 种属性均服务于产品开发阶段，自定义 WTC 类时通常不必额外处理，因为基类的 constructor 函数已替你处理。

&nbsp;
