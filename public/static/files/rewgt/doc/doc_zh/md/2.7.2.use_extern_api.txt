2.7.2 使用扩展 API
-------------------

&nbsp;

前面章节在举例时，已用到不少 utils 与 ex 模块的 API，本节将扼要介绍这两个模块都有哪些 API，然后重点介绍两类重要 API，一类增删 class 定义，另一类是 jsonp 与 ajax 调用。

模块 utils 提供的 API 均为公共处理函数，ex 则为扩展定义模块，专为 MJI 脚本运算提供 API 支持。两者都定义公共 API，但在可计算表达式中，只有 ex 下接口函数可被调用。

#### ex 与 utils 主要 API

ex 模块主要 API 如下：

```
    update              浅拷贝组装数据
    time                取当前时间的毫秒整数值
    isFalse/isTrue      判断条件成立与否
    escape/unescape     等同于 javascript 中的同名函数
    evalInfo            取当前 callspace 相关信息
    setChecked          让指定的选项构件执行选中操作
    tagValue/tagFired   给 data 下成员打时间标签 / 判断指定成员是否更新过
    setVar              在当前 callspace 设置变量
    log                 打印输出
    order               对数组排序
    jsonp/ajax          用 jsonp/ajax 请求数据
```

utils 的 API 主要为底层 Widget 构件开发服务，前面章节已涉及 `identicalId, marked, gotoHash, pageCtrl, loadElement, loadElementEx, setChildren` 等，本节再介绍 `hasClass, addClass, removeClass, mergeClass` 4 个 API，所有 API 详细规格请参考 [API 手册](#4.)。

#### 增删 class 定义

Shadow Widget 将构件的 class 名分开用 className 与 klass 两个属性表达，className 是不变类名列表，只读的，在构件生存周期内不发生变化，klass 是可变类名列表，前者标记当前构件是什么，描述构件的固定属性，后者描述构件状态。

`utils.hasClass(comp,cls)` 用于判断 `comp` 构件是否存在 `cls` 类定义，比如：

``` js
   utils.hasClass(comp,'read_only')   // read_only 是否在使用
   utils.hasClass(comp,'read_only has_select')   // read_only 或 has_select 任一个是否在使用
   utils.hasClass(comp,['read_only','has_select'])   // read_only 或 has_select 任一个是否在使用
```

`utils.hasClass(comp,cls)` 是将 comp.props.className 与 comp.duals.klass 合起来判断 cls 是否有定义的。

`addClass, removeClass, mergeClass` 的参数格式与 `hasClass` 相同，`utils.addClass` 用于添加一个或多个 class，`utils.removeClass` 用于删除一个或多个 class，`utils.mergeClass` 用于合并 一个或多个 class，这 3 个 API 都可能对 `duals.klass` 产生修改，产生修改时返回 true，否则返回 false。

`addClass` 与 `mergeClass` 不同，前者独立看待被添加的 class，若不在使用中，就直接添加，后者 mergeClass 将被添加的 class 视作状态组，比如添加 `'default-large-small'` 时，同时要删除已存在的 `'large-small-default'` 及 `'small-default-large'` 定义。状态组是以 `'-'` 连接各状态段来命名 class 的，且用首段命名表明当前状态。

#### 使用 utils.jsonp 与 utils.ajax

utils.jsonp 函数用来支持 JSONP 调用协议，参见 <a target="_blank" href="https://en.wikipedia.org/wiki/JSONP">JSONP</a>，简单来说，JSONP 是指在 URL 指定 callback 参数，用来向服务端请求 JSON 数据的一种协议。该 API 格式为 `utils.jsonp(config)`，config 用来指定调用参数，重要参数项如下（完整格式请参考 [API 手册](#4.2.3.!jsonp)）：

1. `config.url`，用来指定发送请求的 URL
2. `config.data`，要附加到 URL 实现传递的参数，如 `{name:"wayne",age:"30"}`，会在发送请求的 URL 字串添加 `&name=wayne&age=30`。
3. `config.callback`，请求结束时的回调函数，参数格式：`callback(jsonData)`，如果请求失败，`jsonData` 为 null。
4. `config.notifyError`，请求失败时是否用 `callback(null)` 报告失败，缺省不报告（值为 `false`）。

utils.ajax 用于 ajax 服务调用，它实现的功能与接口参数与 utils.jsonp 类似。`utils.ajax(config)` 主要参数格式如下（完整格式请参考 [API 手册](#4.2.3.!ajax)）：

1. `config.type`，取值为 `'GET', 'POST', 'PUT', 'HEAD', 'DELETE'` 五者之一，缺省是 `'GET'`
2. `config.url`，与 `utils.jsonp` 同名参数要求相同
3. `config.dataType`，取值为 `'json', 'pre-json', 'text'` 三者之一，缺省未指定时，如果 URL 读取某 *.json 文件，自动取 `'json'`（即，把请求结果看作 json 数据），否则取 `'text'`（即，把结果看作字串）。 
4. `config.data`，用于请求的附加参数，当 `type` 为 `POST` 或 `PUT` 时，以 json 格式、utf-8 字串上传，否则这些参数附加在发出请求的 URL 上。
5. `config.success`，请求成功时的回调函数，回调格式 `success(data,statusText,xhr)`
6. `config.error`，请求失败时的回调函数，回调格式 `error(xhr,statusText)`

demo39 给出了 `utils.ajax` 的使用例子，请自行参考。

#### 使用 ex.jsonp 与 ex.ajax

`ex.jsonp` 与 `ex.ajax` 分别对 `utils.jsonp` 与 `utils.ajax` 作封装，使之适合用在可计算表达式中。

`ex.jsonp(config,initValue)` 的 `config` 参数格式与 `utils.jsonp(config)` 的 `config` 要求相同，只是 `config.callback` 回调函数是自动安装的，不必用参数传入。比如：

``` js
    $user='ex.jsonp({url:"query/user.json"},{name:""})'
```

传入参数 `initValue` 用于设置 `state.user` 的缺省值，仅当 `state.user` 的值还未设置（即值为 `undefined`）时才用 `initValue` 赋值，也就是说，`initValue` 参数只在初次调用时使用一次，而且，给 `state.user` 赋值发生在 jsonp 请求返回之前。`initValue` 参数可以缺省，如果缺省，本例 `user` 属性初始值是 `undefined` 了。jsonp 请求是**异步**的，本表达式被计算并不立即得到请求结果，不死等请求返回，而是交由系统接管，当有结果数据返回时，系统自动给 `duals.user` 赋值。说明，`"duals.attr"` 与 `"$attr"` 可并存，`"duals.attr"` 还可被 listen，所以，本例中 $user 得到异步结果后，能触发已侦听 `duals.user` 的动作函数。 

&nbsp;

`ex.ajax(config,initValue)` 也用于异步请求，`initValue` 参数的要求与 `ex.jsonp(config,initValue)` 的 `initValue` 参数相同。`config` 参数则与 `utils.ajax(config)` 的 `config` 要求相同，其中 `config.success` 与 `config.error` 回调函数也自动安装，不必用参数传入。`ex.ajax()` 计算结果的数据格式必须是 `{status:statusText, data:returnData}`，比如：

``` js
    $user='ex.ajax({url:"query/user.json"},{status:"",data:{name:""}})'
```

请求成功时，`user.data` 保存返回的数据 ，`user.status` 值为 `"success"`，失败时，`user.data` 值为 null，`user.status` 记录失败状态描述。

demo40 给出了 `ex.ajax` 的使用例子，请自行参考。

#### 一次请求的数据被多个属性引用

同一节点有多个属性引用 jsonp 或 ajax 请求结果时，宜用 `$data` 表达式获取数据，其它属性则引用 `duals.data` 中的局部数据。因为，每轮 render 更新时，`$data` 表达式总是先于其它可计算属性被执行的。比如：

``` html
  <div $=Div $$for='' 
      $data='ex.ajax({url:"query/user.json"},{status:"",data:null})' 
      $html='duals.data.data && ("name = " + duals.data.data.name)'>
  </div>
```

上面 `duals.data` 的格式是 `{status:statusText, data:returnData}`，注意，`duals.data.data.name` 容易误写成 `duals.data.name`。因为 `duals.data.data` 可能取值 `null`，所以在 `$html` 表达式中，要用 `duals.data.data && expr` 形式，保证取 `null` 值时其后表达式 `expr` 不被运算。

&nbsp;
