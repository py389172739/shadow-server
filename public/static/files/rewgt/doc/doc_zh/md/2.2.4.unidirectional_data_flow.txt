2.2.4 单向数据流
-------------------

&nbsp;

前端开发的复杂性很大程度上来源于两个概念的困扰：变化与异步，两者纠结一起，常把事情弄的一团糟。在 react 技术体系中，react flux 是官方推出的解决方案，其核心是构造单向数据流，配合事件驱动的异步机制，让程序状态更加可预测。有关 facebook 官方介绍的 flux 技术框架，<a target="_blank" href="http://facebook.github.io/flux/docs/overview.html">请参考这里</a>。

市面上已有数十个 react flux 的变种，它们都遵循相同（或十分近似）的理念，其中比较典型，也被广泛使用的有 <a target="_blank" href="https://github.com/reflux/refluxjs">reflux</a> 与 <a target="_blank" href="https://github.com/reactjs/redux">redux</a>。Shadow Widget 自带一套支持 flux 风格的单向数据流机制，其实现方式与 reflux 很接近，在 Shadow Widget 中您既可以引入 reflux（请参考 “进阶篇：工程化开发” 中的相关章节），也可以只使用 Shadow Widget 内置的机制。

我们推荐的做法是：只用 Shadow Widget 自带功能，因为它内置的单向数据流机制尽管很简单，但也够强大，引入第 3 方 flux 框架并非必须。

#### R 节点也是 store

React 是一种数据驱动的编程系统，就单个 react component 节点而言，驱动源是 props 与 state，props 不可变，state 可变但建议尽量只为自身服务，不少基于 react 的框架都推荐尽量编写 stateless component，数据源则尽可能独立（按 flux 框架的要求，另设 store 实体）。Redux 则要求更彻底，不仅将 state 按只读使用，而且全局采用单一数据源。

Shadow Widget 采用近似于 reflux 的解决方案，Reflux 这么创建一个 store：

``` js
  var actions = Reflux.createActions(["fireBall"]);
  var statusStore = Reflux.createStore({
    getInitialState: function() {
      return "open";
    }

    listenables: actions,
    onFireBall: function(){
      // ...
    },
  });
```

这种 `store` 与我们的 R 节点性质相同，因为我们在 R 节点支持 duals 事件化驱动，可侦听、可串接，如果忽略 R 节点展示 UI 界面的功能，就与 reflux 的 store 等效了。即：Shadow Widget 中不显示到界面的 R 节点可用作 store，让节点不在界面显示只需设置它的 `style.display` 为 `"none"`，或者用 **`HiddenDiv, HiddenSpan`** 这两个专用于表达无界面的节点，`HiddenDiv` 可以像 `Div` 那样使用，`HiddenSpan` 可以像 `Span` 那样使用。

Shadow Widget 的无界面节点可用作 store，带界面节点也能用作 store，这么做相对 reflux 有若干进步意义：

1. 在 Reflux 中 action 触发 store 中的 method，与触发 component 中的 method，实现的功能是对等的，但受 react 规格限制，不得不采用两套 API，增加了使用成本。
2. Reflux 中，component 可侦听 store 中的 action，但反过来 store 不能侦听 component，即，数据驱动的流向是从 store 流向 component，而不能从 component 到 store。   
这无疑不利于产品开发，比如，component 中存留数据驱动它的下级节点本来够用，但新增功能后，存留数据要承担更多职能，基于它得另构造驱动流（就像下文即将介绍的 “另增一圈数据流”），只能将相关数据从 component 移出到独立的 store 中，难免要重构。当然，设计之初就采用 stateless 设计可避免这种重构，就像 redux 那样，但 stateless 有 stateless 的问题，这里不展开论述。
3. 尽管 reflux 比 react flux 简化很多，比如省掉 Dispatcher，但相比 Shadow Widget 仍显啰嗦，其 action、store 等用法还可再简化。

#### 多圈层单向数据流

以上一节举例的 Textarea 接收 markdown 文本输入，当输入变化后传给 MarkedDiv 自动刷新 输出为例。Textarea 与 MarkedDiv 这两节点是并列的，无从属关系，它们之间数据流以下图所示方向单向流动。

> ![Markdown编辑的数据流](md/res/markdown_flow.png)

现在我们模拟一个产品开发过程，比方，接着增加存盘功能，用 POST 请求把 markdow 文本上传保存到网盘。增加 Save 按钮，按钮缺省不可点击，当输入文本有变化时，自动触发它变成可点击，于是我们有了第 2 条数据流。然后点 Save 按钮上传刚编辑的 markdown 文本，服务侧回馈保存成功，我们的界面显示 "save successful" 信息，这是第 3 条数据流。再接着，增加用户登录功能，界面提供编辑框输入用户名与密码，登陆成功后，自动请求上次保存的 markdown 文本，再展示到界面，于是有了第 4 条数据流。 

> ![单向数据流](md/res/markdown_flow2.png)

上图以箭头表示流向，这 4 条数据流都是单向的，每条数据流向都清晰勾勒出功能层次，所以叫圈层。这种圈可能封闭成环，也可能不封闭，但即使闭环，数据也是单向流动的。

Shadow Widget 的单向数据流机制，具有如下特点：
1. 多圈层单向数据流动   
功能频繁增删是前端开发的一个特色，所以，圈层数目经常变化。数据流向并不整齐划一，各圈数据流交叉、组合也随意。这些是前端开发的现状，也是 Shadow Widget 考虑应对措施的出发点。
2. 采用多 store 模式   
React flux 采用单 store，需要一个 dispatcher 做分发，Reflux 是多 store，以 listen 方式代替分发，所以用起来更简单。多圈数据流动普适存在，各圈数据的出发点与终点在哪儿没有规律，归并它们反倒是 “非自然” 行为。所以，Shadow Widget 采用多 store方式，其实现机制与 reflux 近似。
3. 适应软件开发的渐进演化过程   
如上面模拟产品的开发过程，随着功能叠加各圈单向数据流是逐步叠加的，比如第一个圈，输入 markdown 文本并展示其显示效果，所涉及的数据用 Textarea 与 MarkedDiv 的 duals 属性直接表示。之后开发第二个圈层时，如果按独立 store 的方式（即：R 节点不用作 store），我们得剥离原 Textarea 与 MarkedDiv 中的数据，独立设一个 store，让它同时为这两圈的数据流服务，必然要经历一次重构。反之，如果 R 节点也用作 store，实现第二个圈层时，我们只需侦听 Textarea 的 `duals.textValue` 的取值，取值变化后驱动 Save 按钮变为可用即可，这样，避免了因剥离一个 store 而重写代码。
4. 生存周期自动管理   
Shadow Widget 的单向数据驱动机制完全依赖双源属性构件，双源属性的触发函数、侦听与连接的有效性，依赖于 W 节点与 R 节点的有效性，都是自动管理的，编程因此简化，比如 reflux 要求在 `componentDidMount()` 中记录侦听结果，如 `this.unsubscribe`，然后在 `componentWillUnmount()` 中调用 `this.unsubscribe()`。 在 Shadow Widget 中不需要这些语句。

#### 是否合乎 react flux 框架？

如果说 reflux 合乎 react flux 框架要求，那么 Shadow 的单向数据流也是符合的，因为它对等的实现了 reflux 相关功能。

具体包括：

1. Reflux 中的 action，在 Shadow Widget 中由 `duals.attr` 承担，侦听、连接都针对 `duals.attr` 进行。
2. 如前文，Reflux 中的 store，在 Shadow Widget 中由 R 节点承担。
3. 触发 action 所传递的 payload，在 Shadow Widget 中由 `duals.attr` 取值表达，在接下来两节还有介绍。
4. duals 属性的 setter 函数支持同步执行，经 listen 的侦听函数则支持异步执行，Shadow Widget 还支持多个异步任务并发，等待它们全部完成后再触发下一步的侦听函数（参见 [“可计算表达式”](#2.5.) 中相关章节）。这与 reflux 中 “串接并行侦听者” 的功能相同。

&nbsp;
