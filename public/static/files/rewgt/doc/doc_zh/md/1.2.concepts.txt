1.2 几个概念
-----------------

&nbsp;

1. **构件**（Widget）    
&nbsp;   
构件是 Shadow Widget 可视化编程中的最基础的可视元件，它对 react component 做封装，通常它可以描述成 JSON 格式的模板文件，在 Shadow Widget 的集成 IDE 界面中可用鼠标将模板文件拖入到当前设计器页面来创建一个构件。构件是可视化，在设计界面中它占据一定长宽的区域，选中该构件后，在属性编辑器中可直接编辑并保存它的属性。   
&nbsp;   
所有构件都是从 react component 封装而来，但并不是所有 react component 都表现为 Shadow Widget 的构件，另外，构件可以由一个 react component 组成，也可以由多个组成。我们可将构件理解成对 react component 的简易封装，封装的目的是适应可视化管理的需要，比如，我们将多个构件串接成一个具有层次从属关系的 *W树*。   
&nbsp;

2. **W 树**   
&nbsp;   
W 树是 Widget 树的简称，在 Shadow Widget 中所有构件都在生效时挂入到 W 树的，当构件不再有效，即从 react 虚拟 DOM 移除时，该构件也自动从 W 树移除。   
&nbsp;   
各个构件通过 key 属性指定它的名称，将从属各层的名称串接形成 **路径**，W 树根节点通常命名为 body，假如其下有一个名为 toolbar 的构件，那么，该构件的绝对路径可表达为 “.body.toolbar”。Shadow Widget 提供 API，只要知道路径字串就能获得任何构件对象，如果已定位一个构件，还可调用 API 以相对路径查得与之邻近的构件对象。   
&nbsp;

3. **数据源**（data-source）与 **驱动处理**（driven-process）   
&nbsp;   
React component 通过 props 与 state 数据变化，驱动界面变化及相关功能得到处理，props.attr 与 state.attr 被视为驱动 Web 页展示各项功能的数据源。Shadow Widget 采用与 reflux 或 redux 近似的概念：用 “数据源” 与 “驱动处理” 来概括这种数据驱动的运行机制。将原先散落在 render() 等函数中的各项处理，按规范方式整理成可动态捆绑的处理过程，从而优雅的解决同步、依赖关系，简便的构造单向数据流机制，比如：一个 driven-process 可侦听（listen）单个数据源，也可侦听单个构件内多个数据源，还可跨构件侦听多份数据源，由数据源变化驱动各种预设的程序处理。   
&nbsp;   
如果您已熟悉 reflux 或 redux，容易混淆 Shadow Widget 中的相关概念，不妨先不尝试对比，因为 Shadow Widget 构造单向数据流的方法相当直白，可以把上面所提 data-source 简单理解为：可事件化的 props 与 state 属性，driven-process 则理解为：可与事件对接的函数定义。  
&nbsp;

4. **双源驱动**（dual-source-driven）   
&nbsp;   
React 是数据驱动编程系统，各级 component 由传入的 props 决定它的行为模式，在运行中，又用 setState() 通过改变它的 state 属性来决定 component 如何表现。我们进一步理解一下，在 react 中，props 与 state 如何变化促使它表现不同功能的，比如有一个 key 值为 "btn" 的 component，用 JSX 描述这个按钮：   
&nbsp;&nbsp;&nbsp;&nbsp;`var jsx = (<button key="btn" name="sample" data-state={this.state.btnState}>Test</button>);`   
state 属性驱动就是用类似这样的语句触发：`comp.setState({btnState:"new state"})`，
props 属性驱动大致是这样，在下次 render 时，比如将它的 name 改一下：   
&nbsp;&nbsp;&nbsp;&nbsp;`var jsx = (<button key="btn" name="foo" data-state={this.state.btnState}>Test</button>);`   
该 jsx 输出对象的 props.name 值将变为 "foo"，其 DOM 节点的 name 属性值也随之变化。   
&nbsp;   
如果我们将上面两种驱动方式改造一下，少些函数式风格（因为它依赖于编程），多些指令式风格（便于用 tag 属性也能描述），变成双源驱动模式：   
&nbsp;1. 将 `setState()` 改用 `comp.duals.btnState = "new state";`  用常规属性赋值来驱动程序运行。   
&nbsp;2. 将 JSX 传递 props（或用 `React.cloneElement()` 等方法），也改成赋值方式，如：`comp.duals.name = "foo";`   
&nbsp;3. 让 duals.attr 具备事件驱动的能力，duals.attr 值变化可被侦听，它还可侦听其它数据源是否变化，来触发本 duals.attr 自动更新。   
&nbsp;   
双源驱动并未改变 react 原有的 props 与 state 的用法，只是新增了 duals 集合，将 props 下部分属性纳入 duals（纳入的属性也自动注册到 state 下），以 duals.attr 形式使用，原有 props 与 state 下的属性仍然存在。   
&nbsp;

5. **可计算属性**（evaluatable property）   
&nbsp;   
可计算属性是 Shadow Widget 中经过推导自动计算出来的属性，下面用 JSX 风格举个例子：   
&nbsp;&nbsp;&nbsp; `<button name="foo" $$for='' $data-name='duals.name + "_1"'>Test</button>`   
计算后 data-name 属性值是 "foo_1"。所有可计算属性以 “$” 开头，其值是一个符合 javascript 语法的表达式字串，表达式中可引用现有 duals 变量，比如上面的 "duals.name"，凡被引用的变量，会自动与本表达式建立联动更新关系，当源头数据有变化，这个表达式会自动重新计算。   
&nbsp;   

6. **引用参考点**   
&nbsp;   
Shadow Widget 支持 “节点引用” 的描述方式，指定被引用节点的路径，以及需更新的属性值即可引用，比如：   
&nbsp;&nbsp; `<RefSpan $=".path.to.target" name="another_name" />`   
其中 "$" 属性用于指定被引用节点的路径，"name" 是新赋值属性，引用的结果将克隆源节点，并且新赋值属性将替换旧值。   
&nbsp;   
引用后，原引用描述点（如上面 `<RefSpan>` 节点）被克隆后的目标节点替换，目标节点称为 **引用参考点**，引用参考点会自动配置一个域名空间（namespace），让 “可计算属性” 的表达式可以被解析，比如，前面举例的表达式 "duals.name"，其中 "duals" 符号就从这种域名空间查得。换一句话说：在引用参考点，系统自动为可计算表达式的解释执行配备相关计算环境。   
&nbsp;

7. **调用空间**（callspace）   
&nbsp;   
Shadow Widget 支持 `$for` 可计算属性，如 `$for='item in duals.items'` ，然后以循环方式组装它的子节点，循环次数与 `duals.items` 数组长度有关。`$for` 与其它可计算属性不同，使用它表示进入下一层域名空间，这里 `item` 是一个变量，依次取 `duals.items` 各个成员值。前面介绍的引用参考点与 `$for` 指令都能产生新一层域名空间，多层域名空间串接形成栈式结构，我们称为调用空间（callspace）。   
&nbsp;   
如果一下子难以理解 callspace 的概念，不妨想象一下，`$expr` 可计算指令是另一维度的脚本系统，它自成体系，也具备层次嵌套关系，是栈式调用的。比如 `item`  从当前（栈顶）域名空间（namespace）查得，而 `item(-1)` 则从上层域名空间查询，再如 `duals(-1).name` 从上层域名空间查得，而 `duals(-2).name` 则要从上上层域名空间中查得。

&nbsp;
