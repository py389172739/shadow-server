3.5.1 开发版本与发行版本
-----------------------

&nbsp;

#### 开发版本与发行版本的关系

同一产品有发行态与调测态并存的需求，比如产品已发布，但发现 Bug 后立即启动调测来定位问题，通常我们要求一个产品工程同时支持以 production 或 development 形态来运行，而不是在两个目录分别保存开发版与发行版两个工程。

所以，对于运行在本机的调测环境而言，开发版与发行版是同一工程的两种启动方式。

其次，对于运行中的工程，它能识别当前运行在开发态与发行态，Shadow Widget 采用 `W.__debug__` 指示当前版本以 development 方式运行，还是以 production 方式运行，编程中我们可以广泛插入如下代码来辅助调测：

```
    if (W.__debug__) {
      // write some code for debugging
    }
```

最后，当产品调测通过，要正式发布时，须经转译、压缩等一系列打包过程，发布到市场的产品代码应该是整洁的、精简无重复的。所以，一个开发中的工程在本机至少有 3 种运行方式：未经打包时既能以 development 方式运行，也能以 production 方式运行，还有一种是打包后的 production 方式。

#### 发布前的版本如何调测

如果不搭建工程环境，像 [“简单示例”](#1.4.) 举例的 demo1 工程那样，只在 html 网页中编程，运行被测工程比较简单，只两步：

1. 在本机启动 WebService 服务
2. 在浏览器访问工程目录（如 `http://localhost:3000/demo1/`），就把被测工程运行起来了

如果像 [“搭建工程环境”](#3.1.) 描述的那样建立 browserify 或 webpack 工程环境，在网页 html 文件中，用 `'<script src="bundle.js"></script>'` 导入 bundle.js（这正是打包工具缺省输出的文件）。同样在本机 WebService 启动后，再在浏览器访问工程目录，当前工程即被运行。

打包工具缺省输出的 bundle.js 文件，已将所有依赖的 JS 库一并打包了，包括：react、react-dom、shadow-widget 等。接下来要介绍的为发行版本做适配，无非改变一下 bundle.js 的组织方式。

#### 制作发行版本的打包过程

发行版本既可以像调测用的 bundle.js 那样，把所有依赖库打包在一起，也可以把标准库从输出的 JS 文件剔除，这样，在网页文件中要用多条 `<script>` 语句把各个标准库导入进来，比如：

```
  <script src='https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react.min.js'></script>
  <script src='https://cdnjs.cloudflare.com/ajax/libs/react/15.3.1/react-dom.min.js'></script>
  <script src='js/shadow-widget.min.js'></script>
```

我们建议采用后一方式，即：将依赖的标准库独立出来使用。因为标准库通常较大，有时不只 Shadow Widget 工程依赖它，其它网页也可能依赖它，因近期用过的标准库可被浏览器缓存，将标准库独立出来分别导入，可减少远程加载次数，另外，上层依赖标准库的版本也能灵活替换，尽量让底层库统一到同一版本。

剥离 react、react-dom 标准库，并经压缩的 Shadow Widget 发行版本，也称为 cdn 版本。在网页中用 `<script>` 标签导入该 cdn 库后，系统自动创建 `window.W` 变量，该变量就是 `requrie('shadow-widget')` 的结果值。这种做法与导入 react 与 react-dom 的发行版自动登记变量 `window.React, window.ReactDOM` 是一致的。

制作发行版本第一步：生成剔除标准库的 bundle.js 包文件。

若用 browserify 打包工具，将标准库从 bundle.js 剔除用 `-u` 选项，原 `npm start` 执行如下命令（见 package.json 中 start 命令）：

```
    watchify index.js -v -o bundle.js -t [ babelify --presets [ es2015 react ] ]
```

剔除 3 个 cdn 库，start 命令改为：

```
    watchify -u react -u react-dom -u shadow-widget index.js -v -o bundle.js -t [ babelify --presets [ es2015 react ] ]
```

若用 webpack 打包，应在 webpack.config.js 中配置 externals，将 `react, react-dom, shadow-widget` 三个库定义为 external 即可，详情请参考 webpack 用户手册。

第二步：压缩 bundle.js 文件。因为 bundle.js 已转化为 ES5 规格，业界已有许多 `JS Minify` 工具，选择一款做压缩即可。

以上扼要介绍打包过程，实际的打包操作可能很复杂，比方还涉及 css 转换、图片合并等，请尽量采用第 3 方工具（如 gulp），把打包过程自动化起来。

&nbsp;
