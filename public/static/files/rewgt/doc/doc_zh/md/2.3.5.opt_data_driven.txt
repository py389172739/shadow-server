2.3.5 选项构件的数据驱动
---------------------------

&nbsp;

#### 用 trigger 驱动双源属性更新

如果 trigger 预定义了由 `[sPath,modifier,attr]` 指示的动作，表示找到 `sPath` 指示的目标构件，得到它的 `duals[attr]` 属性，然后用 `ex.update(duals[attr],modifier)` 更新 `duals[attr]` 的值。这里 `attr` 可以缺省，缺省时将更新 `duals.data` 属性（即 `attr` 自动取 `'data'` 值）。

举例如下：

``` html
  <div $=Panel key='top'>
    <div $=NavPanel key='nav' width='{0.9999}' height='{80}'>
      <div $=P key='opt'>
        <span $=Span key='txt' dual-data='{["text",0]}'>text</span>
        <span $=Label key='lab'>
          <span $=OptInput type='radio' key='btn' 
            trigger='{["./opt.txt",{"$set":["text",1]}]}'></span>
          <span $=Span>trigger</span>
        </span>
      </div>
    </div>
  </div>
```

这个例子中，`trigger='{["./opt.txt",{$set:["text",1]}]}'` 定义待触发的动作，`"./opt.txt"` 指示目标节点，找到目标节点的 `duals.data`，之后的动作相当于执行如下语句：

``` js
    duals.data = ex.update(duals.data,{$set:["text",1]});
```

触发动作前后，我们可以这么检验赋值有没成功：在浏览器控制台运行脚本 `comp = W.body.top.nav.opt.txt.component` 得到目标节点 `comp`，再运行 `comp.duals.data` 查看当前值是否有变化。

注意：
1. 若想更新多个 `duals.attr`，在 `trigger` 用数组依次罗列各项 `[sPath,modifier,attr]` 即可。
2. `[sPath,modifier,attr]` 中的 `sPath` 可以是空字串，代表 `trigger` 属性所在的自身节点，如果 `sPath` 是相对路径，以 `trigger` 所在节点为参考。可更新任意目标节点的 `duals.attr` 属性值，并不限于选项构件。
3. 非选项构件也支持 `trigger` 双源属性，但不像选项构件那样选中即自动触发，要借助编程手段触发（调用 `utils.fireTrigger()` ），或经由其它选项构件的 trigger 动作驱动。

属性 `duals.trigger` 只是静态列出该响应的动作，需有显式条件触发它们，触发条件包括：

1. 若在选项构件定义 `trigger`，构件被选中（比如在界面点击）时自动触发 trigger 动作   
由于在 `trigger` 属性中可指定其它选项触发器的动作，所以，多个选项构件可以串联起来使用。

2. 增加 `$trigger` 可计算属性，当它获得更新时，将自动触发 trigger 动作，参见 [几个特殊的可计算属性](#2.5.1.!special_dual)

3. 编程调用 `utils.fireTrigger()` 函数可触发 trigger 动作，参见 [API 参考手册](#4.2.3.!fire_trigger)

#### 侦听 data-checked 变化

选项构件的 `data-checked` 是双源属性，其值变化可被侦听，例如：

``` js
  main['.body.top.nav.opt.lab.btn'] = {
    componentDidMount: function() {
      this._componentDidMount(this);
      
      this.listen('data-checked', function(value,oldValue) {
        console.log('data-checked =',value);
      });
    },
  };
```

通过侦听 `data-checked` 值变化，我们捕获选项构件的状态变迁事件，以此组织单向数据流动的响应式开发系统。

本节举例用到的代码在 demo20。另外，`duals.trigger` 常与 `fireType` 及 `$trigger` 配合使用，详情将在后面 [“可计算属性”](#2.5.1.) 一节介绍。

#### 选项构件与导航面板、场景面板的对应关系

多个选项构件只有在同一导航面板下才表现 “互斥选中” 的效果，“互斥选中” 是指某个选项构件被选中后，其它选项构件自动取消选中。

一般而言，选项构件不应在 NavPanel 或 NavDiv 之外的场合使用。如果一定要在 NavPanel 或 NavDiv 之外使用，也应设置该构件的 `isolated` 为 `"1"`，让它处于隔离态，不再响应切换场景面板的操作，设置 `isolated="1"` 可防止选项构件选中与否，对上层导航面板产生意外影响。

当选项构件用于切换场景面板时，有多少个场景面板，就应设计多少个选项构件，两者用同名 key 值关联。但，同一场景面板由多个选项构件（其 key 相同）点选出来也是允许的，也就是说，同一场景面板可被多个选项构件中任一个召唤。

导航面板具有多种功能，除了动态切换场景面板，它还常用于如下两种场合。其一，用作 “选项触发器”，比如用来触发浮层弹窗，或驱动指定节点的 `duals.attr` 更新。其二，有时为引用相对路径方便，也使用一个导航面板，其下各构件都能以 “相对路径” 定位，此举可隔离本段之外的设计，让本段相对独立，有利于提高程序的可移植性、可维护性。

&nbsp;
