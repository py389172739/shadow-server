1.3 实现原理
-----------------

&nbsp;

#### 借助 HTML 标签描述用户界面

为兼顾性能与易读、易维护特性，Shadow Widget 不使用 JSX 描述方式，改用原生 html tag 的方式，使用 div 与 span 这两种 tag，描述 W 树定义，比如：   
&nbsp;&nbsp;&nbsp; `<div $=P><span $=Span>Hello, world!</span></div>`   
这里，`div` 标签表达非行内元素，`span` 则表达行内元素，`$` 用来指示转义后的 tag 名，上面代码将被转换成：   
&nbsp;&nbsp;&nbsp; `<p><span>Hello, world!</span></p>`   
上面转义后的 `P` 与 `Span` 都是 Shadow Widget 内置支持的构件类，其语义分别等效于原生的 p 与 span 标签，Shadow Widget 已内置描述了大部分 html 标签，命名均采用首字母大写，剩下字母小写且与原生 tag 相同，如：`input` 在 Shadow Widget 对应的构件名为 `Input`，`textarea` 对应的是 `Textarea`。

借助 tag 转义，用 span 表达任何行内标签（inline tag），用 div 可表达任何非行内标签，两者合一起可表达全部 tag。注意，这两者所支持的转义 tag 不可混用，比如 `<div $=Span></div>`  是错误用法，因为 Span 是行内标签。

经上述转义后，我们可以直接把这种语句写在 *.html 文件中了，比如在 html 的 `<body>` 标签下编写如下代码：   
&nbsp;&nbsp;&nbsp; `<div $=Panel height='{60}'>`   
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; `<div $=P><span $=Span>Hello, world!</span></div>`   
&nbsp;&nbsp;&nbsp; `</div>`   
这里 Panel 是 Shadow Widget 提供的面板控件，其属性 height 是大括号括起来的字串，首与尾大括号表示它是 JSON 数据，系统自动调用 JSON.parse() 分析其内容，比如这个 height 属性值为 60，是 number 而不是 string 类型。

#### 用 ES5 做前端上层开发

如前文 [两大设计目标](#1.1.) 中介绍，前端开发可分两类：开发构件（Widget）、使用现成构件开发应用程序，对于后者，因为不去开发底层构件，他不必学习 ES6、ES7 语法，不必接触 babel 等翻译工具，也不必使用 browserify、webpack 等打包工具，他只需熟悉符合 ES5 标准的 javascipt 即可。只有构件开发者，才必须接触 ES6 及相关配套工具。当然，全部开发都采用 ES6 规范也是可以的，只是我们不推荐这么做，因为构件之外的开发，需要保证以实习生的水平也能承担，将前端的上层开发也弄得无比复杂，显然不明智。

Shadow Widget 要求构件开发者采用 ES6 的 class 定义各级构件，各构件都有用 ES5 进行定制扩展的功能，下面扼要介绍它的实现原理。

``` js
    // define widget class (TPanel_) with ES6
    //--------------------------------------
    class TPanel_ extends TWidget_ {
      constructor(name,desc) {
         // ...
      }
      _createClass(defs) {
         // ...
      }
    }
    
    // extend react class (Panel) with ES5
    //--------------------------------------
    var Panel = (new TPanel_())._createClass( {
      getInitialState: function() {
         // ...
      },
      componentDidMount: function() {
         // ...
      },
      render: function() {
         // ...
      },
    });
```

无关代码我们用注释省掉了，上面针对 Panel 的构件定义采用 ES6 语法，但调用 `_createClass(defs)` 生成 `Panel` 时，`defs` 用 ES5 语法实现，生成的 `Panel` 是 React Class，与调用 `React.createClass()` 得到结果等效，隔离底层 ES6 与上层 ES5 关键在于 `_createClass()` 中的组装处理。作为初学者，您先不必关心 `_createClass()` 如何实现的，只需清楚这是分界点，底层用 ES6 按类继承方式（如本例中 `TPanel_` 从 `TWidget_` 继承而来）开发各个构件，而上层用 ES5 动态安装的方式定制具体应用。

#### 投影式声明（Shadow declaration）

实际开发中，我们并不需要像上面那样显式调用 `_createClass(defs)`，而是按固定规则将 `defs` 注册到某处，然后系统初始化时，自动导入这个定义（即隐式自动调用 `_createClass(defs)`）。比如下面描述一个按钮的界面：   
&nbsp;&nbsp;&nbsp; `<span $=Button key='btn'>Click me</span>`   
这个构件引用 `Button` 定义，假定它的绝对路径是 `".body.toolbar.btn"`，接着我们用 javascript 定义它的表现行为：

``` js
    main['.body.toolbar.btn'] = {
      getInitialState: function() {
        return this._getInitialState();
      },
      
      $onClick: function(event) {
        console.log('clicked');
      },
    };
```

在 `main['.body.toolbar.btn']` 定义的东西就是调用 `_createClass(defs)` 所需的 defs 参数，为区别起见，我们把这种定义方式称为 **投影式声明**（Shadow declaration），defs 称为投影定义（有时也称投影类）。

投影式声明的详细格式以后再介绍，请大家先理解该声明方式有个特点：它在 Widget 构件定义的上层，割断了 class 继承链（若用类继承：`class childClass extends Button { }` ）。这使得最上层的定义与底层隔离开来，不再受 ES6 语法、打包工具等约束，另外，以 “路径名+构件名” （如本例的 ".body.toolbar.btn" + "Button"）来识别可编程的 DOM 对象，使得指令化描述成为可能，否则，若像 react 推荐的那样必须先定义 class，然后再用 JSX 引用 该 class，界面声明与 component 定义就纠缠在一起了，达不到界面设计分离的目的。

由于采用投影式声明的机制，我们的技术体系也因此命名为 Shadow Widget。

#### 双源驱动

如上一节介绍，双源驱动取 props 下部分属性，构造事件化驱动的机制，它采用 `Object.defineProperty()` 接口定义 setter 与 getter 回调来实现，即，对 `comp.duals.attr` 取值时，相应的 getter 函数自动被调用，对它赋值时，setter 函数被调用。getter 很简单，直接返回 comp.state.attr 值，setter 比较复杂，要判断赋值是否立即执行，还是延后到下个周期再执行，延后执行是为了保证数据单向流动，此外，成功赋值后，还要触发已侦听本属性的所有事件函数。

&nbsp;

**特别说明**：对于初学者，可能无法完全理解本节与上一节（[几个概念](#1.2.)）的内容，不要紧，完全理解这两节内容需要对 react 有深入了解，对 Shadow Widget 也须有基础认识。不妨先理解个大概，请继续按顺序学习本手册，待深入理解后，再回头重读这两节的内容。

&nbsp;
