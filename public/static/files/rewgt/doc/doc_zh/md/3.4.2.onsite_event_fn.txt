3.4.2 即时定义事件函数
------------------

&nbsp;

#### 获得 WTC 类

在上一节的例子中，我们用类似 `T.Panel._createClass()` 方式取得非定制的 React Class，逐个获取比较麻烦，不妨调用 `utils.getWTC()` 批量取得非定制的 WTC 类。

比如：

```
  var t = utils.getWTC(['Panel','Button','usr.Submit']); // t.Panel, t.Button, t.Submit
  var t = utils.getWTC('*');        // t.Panel, t.Span, ...
  var usr = utils.getWTC('usr.*');  // usr.Submit
  var t = utils.getWTC(['*','usr.Submit']);  // t.Panel, t.Span, ... t.Submit
```

通配符 `*` 表示取指定层之下所有 WTC 实例的非定制 React Class。

#### 传递事件函数

将上一节用过的例子改造一下，定义 onClick 函数，在 JSX 中用 props 参数传递，如下：

```
var React = require('react');
var ReactDOM = require('react-dom');
var W = require('shadow-widget');

var T = W.$templates, utils = W.$utils, ex = W.$ex;

var t = utils.getWTC('*');

function onLoad() {  
  function onClick(event) {
    alert('clicked: ' + this.duals.keyid);
  },
  
  var body = W.W('.body').component;
  body.setChild(
    <t.Panel key='top' height={null}>
      <t.P>
        <t.Button key='btn' $onClick={onClick}>test</t.Button>
      </t.P>
    </t.Panel>
  );
}

W.$main.$onLoad.push(onLoad);
```

&nbsp;

传递给 WTC 类的事件函数，要求属性名用 `'$'` 前缀标识，如 `'$onClick'`。事件函数传递给 WTC 构件后，能自动与目标构件捆绑，这使得该事件函数中，`this` 指示目标 component，所以，上例中，`alert('clicked: ' + this.duals.keyid)` 可以正确运行。

#### 在 JSX 传递可计算属性

可计算属性也以 `'$'` 为前缀，但可计算属性的值必须是 string 类型，而事件函数是 function 类型，所以，对于 `'$'` 前缀的属性，Shadow Widget 以值类型判它是事件函数，还是可计算属性。

比如：

```
  <t.Button $onClick={onClick} $$for='' $name='"btn_" + duals.keyid'>test</t.Button>
```

`$onClick` 是事件函数，`$name` 是可计算属性，不会混淆。

&nbsp;
