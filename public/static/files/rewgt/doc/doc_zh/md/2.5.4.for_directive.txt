2.5.4 循环指令
------------

&nbsp;

#### 用 "$for" 动态组装子节点

如下例（见 demo29）：

``` html
  <div $=Panel key='top' height='{null}'>
    <div $=Div key='div' dual-data='{["item1","item2","item3"]}' $for=''>
      <div $=Ul width='{0.9999}' $for='item in duals.data'>
        <div $=Li $key='"li_" + index' $html='item + ", " + index + " of " + count'></div>
      </div>
    </div>
  </div>
```

用 `$for='item in duals.data'` 指示循环主体，这里 `item in expr` 是固定用法，含义是：依次遍历 `expr` 中的成员，`item` 是遍历得到各个成员值时的变量名，本例中 `$for` 表达式的计算结果是 `["item1","item2","item3"]`，即计算 `expr` 所得的值，结果值要求是 array 类型，它将保存到 `$for` 所在节点的 `state['for']`。

在 `item in expr` 的下一级，可以引用 item 变量来循环组装多个子节点。循环次数正是被遍历的 array 数组长度。如上例，遍历组装结果是 3 个 `<li>` 子节点。

在 `item in expr` 句式下，有三个预置变量可用：`item, index, count`，其中 `index` 是遍历序号，如上例，被遍历 array 的长度是 3，遍历时 index 依次取值 0、1、2，`count` 变量指示 array 长度，上例中它的值是 3。

注意，循环遍历的各个子节点要显式指定 key，因为 React 要求子节点 key 值不能重复。宜结合 `index` 定义 key 值，如上例用表达式：`"li_" + index`。

上例有 2 层 callspace 栈，-1 层由 `:for=''` 开启，0 层由 `$for='item in duals.data'` 开启，接下来我们演示在下层如何存取上层的属性。

下面例子也在 demo29 给出：

``` html
  <div $=Panel key='top' height='{null}'>
    <div $=Div key='div2' dual-test='{1}' dual-data='{["item1","item2","item3"]}' $for=''>
      <div $=Ul width='{0.9999}' $test='duals.test + 1' $for='item in duals.data'>
        <div $=Li $key='"li_" + index' $html='duals.test + "," + duals(-1).test'></div>
      </div>
    </div>
  </div>
```

在 -1 层我们定义了 `duals.test`，取值为 1，在 0 层也定义 `duals.test`，用表达式 `duals.test + 1` 取值，计算表达式时，`duals.attr` 要从临近 callspace 所在的节点去取， 所以要从 -1 层找到 `duals.test` 再加上 1。注意，尽管此时已用 `item in expr` 开启新的 callspace，但它自身的可计算属性被 MJI 解释器解析时，仍以上一层 callspace 为当前 callspace，新开启的 callspace 是为它的下层节点准备的。

在 `$for` 循环的下层（如上例 Li 节点），表达式中的 `duals.attr` 到当前 callspace 所在的节点获取，而 `duals(-1).attr` 则到上一层 callspace 所在的节点获取。
 
#### 动态组装的节点也能自动更新

接上例，如果我们修改 -1 层的 duals.test 值，看看与之相关的节点如何表现。在浏览器的控制台运下如下脚本：

``` js
    W.body.top.div2.component.duals.test = 99
```

您将发现 0 层 `duals.test` 值自动更新为 100，循环组装的子节点也自动更新过了。

这里使用 `W.body.top.div2` 与 `W.W('.body.top.div2')` 效果等同，但前者更简洁，且在浏览器控制台中，还有逐段提示输入（注：某些浏览器不支持，Firefox 是支持的）的功能，用起来更方便。

#### 用 "$$for" 更简单表达

上例中，为了计算 `item in duals.data` 表达式，在它的上层必须有 callspace 定义，所以我们用 `$for=''` 定义 -1 层 callspace。我们希望将这两层合并，让界面描述变得更简洁。

由于 `$` 引用也能开启一个 callspace，我们就用 `$` 引用的方式替代上述 `$for=''`。上例 -1 层节点与 0 层节点合并后，引用便成为 “自我引用”，不是真引用，但要在本节点插入一个类似引用的 callspace，因此，我们引入一个新属性 `$$for` 标记这个特性。

举例如下（见 demo29）：

``` html
  <div $=Panel key='top' height='{null}'>
    <div $=Ul key='ul' width='{0.9999}' dual-data='{["item1","item2","item3"]}' 
         $$for='item in duals.data'>
      <div $=Li $key='"li_" + index' $html='duals.data[index] + "," + duals(-1).data[index]'></div>
    </div>
  </div>
```

属性 `$$for` 可简单理解为 `$` 与 `$for` 的合体，它的取值要求与 `$for` 相同。合体后，节点只一个，但绑捆在该节点的 callspace 有两个，仍是 -1 层与 0 层栈式结构，所以，在本例的遍历循环中，`duals` 与 `duals(-1)` 指向同一节点。

#### 嵌套使用 "$for" 循环

编程中经常要嵌套定义动态节点，比如把两个 `$for` 循环嵌套起来，各层自行引用遍历而来的 `item` 变量。在里层还可以用 `item(-1)` 引用外层的 `item`。

比如 demo30 给出的例子：

``` html
  <div $=Panel key='top' height='{null}'>
    <div $=Ul key='ul' width='{0.9999}' $$for='item in duals.data'
         dual-data='{[{"name":"A","data":["item1","item2"]},{"name":"B","data":["test1","test2"]}]}'>
      <div $=Li $key='"li_" + index' $html='item.name'></div>
      <div $=Ol $key='"ol_" + index' $for='item in item.data'>
        <div $=Li $key='"li_" + index' $html='item + " in " + item(-1).name'></div>
      </div>
    </div>
  </div>
```

除了可以用 `item(-N)` 引用外层数据，`index(-N)` 与 `count(-N)` 也可以，同理，`duals(-N)`、`props(-N)`、`state(-N)` 一样可用。除了 `-N` 路径指示，还要以用 “相对路径” 来指示，不过要注意，它的参考基点是当前表达式的当前 callspace 所在的节点，有时它并不等同于当前表达式所在的节点。

#### 过滤循环列表

循环表达式用如下句式支持过滤：

``` js
    item in expr, filter_expr
```

计算 `item in expr` 得到一个 array 数据后，用 `filter_expr` 对数组内容进行过滤，`filter_expr` 是条件表达式，对数组成员（用临时变量 `$item` 表示）是否满足某条件作判断，如果条件成立表示，表示该成员要保留，否则它被过滤掉。

比如，`duals.data` 这么取值：

``` js
    [{"name":"wayne","age":32},{"name":"george","age":40},{"name":"peter","age":35}]
```

如果循环表达式是：

``` js
    item in duals.data, $item.age > 32 && $index < 2
```

过滤后得到集合将是：

``` js
    [{"name":"george","age":40}]
```

条件表达式还可以直接用常量 `true`，表示所有成员都有效。上面代码请参考 demo31。

过滤表达式 `filter_expr` 中允许使用 3 种临时变量：`$item, $index, $count`，在遍历数组成员时，分别表示当前数组成员、当前序号（从 0 开始）、数组长度。

#### 给循环列表排序

在 `$for` 表达式中给循环列表排序要用如下格式：

``` js
    item in expr, attrName1, attrName2, ...  iOrder
```

想依据哪个属性做排序，在 `item in expr` 之后列出即可，比如：

``` js
    item in duals.data, "age"
```

表示按 `$item.age` 的值排序，还可指定多个排序属性名，比如：

``` js
    item in duals.data, "age", "name"
```

表示以 `$item.age` 为主排序，但 age 值一样时，再用 `$item.name` 排序。

缺省的排序方式是正序，即：从小值到大值，如果想用倒序，最后一个参数 iOrder 用 -1 即可，比如：

``` js
    item in duals.data, "age", -1
```

当 iOrder 取值大于等于 0 时，表示正序，否则逆序。

#### 同时使用过滤与排序

过滤与排序可以并用，如：

``` js
    item in duals.data, $item.age > 32, "age", -1
```

两者并用时，过滤表达式要先写，排序后写。过滤表达式只能写一个，可以用与（`&&`）、或（`||`）描述复杂的运算逻辑。

&nbsp;
