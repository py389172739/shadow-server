2.2.2 定义双源属性
-----------------------

&nbsp;

React 的 `props.attr` 与 `state.attr` 取值对一个 component 如何表现均产生影响，这二者是驱动 react 程序功能的两个源头。在程序运行中， `state.attr` 可动态修改，`props.attr` 是只读的，虽不能直接修改，但由其上级在 render 输出时，通过改变由 JSX 传递的属性值，`props.attr` 仍会变化，从某种意义上说，它也是动态可变的。

双源属性可简化编程，将同名属性的 `props.attr` 与 `state.attr` 注册为 `duals.attr`，让 `duals.attr` 变化代表原先的 `props.attr` 与 `state.attr` 变化，以此组织事件化的、单向数据流风格的 “触发/响应” 系统。有关双源属性与双源驱动的定义请参考前文 [“几个概念”](#1.2.) 。

在操作上 `duals.attr` 代表 `props.attr` 与 `state.attr`，但后两者依然存在，并且可用。

#### 透传属性

React 创建 component 时，将 HTML 标签中标准属性透传给虚拟 DOM，比如 `props.id` 传递后创建的 DOM 节点会有 `id` 属性，Shadow Widget 维持这个规则，并将它们自动注册为 duals 属性（如 `duals.id`）。所有可透传属性罗列如下：

```
  accept  acceptCharset  accessKey  actionv allowFullScreen
  allowTransparency  alt  async  autoComplete  autoFocus
  autoPlay  capture  cellPadding  cellSpacing  challenge
  charSet  checked  cite classID  colSpan  cols  content
  contentEditable  contextMenu  controls  coords  crossOrigin
  data  dateTime  default  defer  dir  disabled
  download  draggable  encType  form  formAction  formEncType
  formMethod  formNoValidate  formTarget  frameBorder  headers
  hidden  high  href  hrefLang  htmlFor  httpEquiv  icon
  id  inputMode  integrity  is  keyParams  keyType  kind
  label  lang  list  loop  low  manifest  marginHeight
  marginWidth  max  maxLength  media  mediaGroup  method
  min  minLength  multiple  muted  name  noValidate  nonce
  open  optimum  pattern  placeholder  poster  preload
  profile radioGroup  readOnly  rel  required  reversed
  role  rowSpan  rows  sandbox  scope  scoped  scrolling
  seamless  selected  shape  size  sizes  span  spellCheck
  src  srcDoc  srcLang  srcSet  start  step  summary
  tabIndex  target  title  type  useMap  value  wmode  wrap

  about  datatype  inlist  prefix  property  resource  typeof  vocab

  autoCapitalize  autoCorrect  color  itemProp  itemScope  itemType
  itemRef  itemID  security  unselectable  results  autoSave

  dangerouslySetInnerHTML
```

除了标签的标准属性会透传，react 还对 `data-*` 与 `aria-*` 属性也透传，Shadow Widget 也原样支持透传，并将它们注册为 duals 属性，比如：comp.props['data-state'] 传递后，会注册 `comp.duals['data-state']`，渲染输出的节点 node 可读取变量 `node.dataset.state`。

总之，凡 react 支持透传到 DOM 节点的属性，Shadow Widget 也透传，并自动注册为 duals 属性。

#### `dual-*` 属性

Shadow Widget 还自动将 `dual-*` 属性自动注册到 duals，其命名在去掉 "dual-" 前缀后再取驼峰（camelCased）方式，比如，`dual-test` 注册为 `duals.test`，`dual-test-data` 注册为 `duals.testData`。

`dual-*` 并不透传到 DOM 节点，使用它还须避免与其它属性重名，比如同一节点中 `props['dual-name']` 与 `props.name` 不能同时使用，否则产生命名冲突了，因为如果 `props.name` 若是标签标准属性，也是自动注册为 `duals.name` 的。

#### 调用编程接口注册 duals

除了上述传属性的方式可定义 duals 外，还可调用 `defineDual()` 接口来注册双源属性。duals.attr 要像 `props.attr` 或 `state.attr` 一样在构件挂载后就可使用，所以我们要求在构件的 `getInitialState` 函数中调用 `defineDual()` 注册双源属性。比如：

``` js
  main['.body.top.p2'] = {
    getInitialState: function() {
      var state = this._getInitialState(this);
      this.defineDual('data');
      return state;
    },
  
    $onClick: function(event) {
      console.log('clicked:',this.duals.data);
      this.duals.data = (this.duals.data || 0) + 1;
    },
  };
```

这里注册一个缺省值为 `undefined` 的 duals 属性 `data`， 然后每次点击都将 `duals.data` 的值累加一。

双源属性实现原理是：预先调用 javascript 的 `Object.defineProperty()` 来注册 `getter` 与 `setter` 函数，**把针对 `duals.attr` 的读值与赋值过程转变为 `getter` 与 `setter` 函数调用**。一般来说，一个 `duals.attr` 变量对应于一个 `state.attr` 变量，即：双源属性 `dual.attr` 就是对 `state.attr` 读写的定制化封装。而且，执行 `comp.duals.attr = value` 时，赋值语句 `this.state.attr = value` 会在它的 setter 函数调用之前自动执行。

注册双源属性的 API 为 `defineDual(sAttr,setterFunc,initialValue)` ，其中后面两个参数可缺省。首参数指定属性值（要求是非空字串）；第二个参数是 setter 函数，如果未指定，系统将自动生成缺省的 setter 函数；第三个参数指定该属性的缺省值（若未指定就自动取 `undefined`），注意，此参数值直接赋给 `state[sAttr]` 而不触发 setter 函数调用。

让 duals 使用指定的 setter 函数，举例如下：
 
``` js
    this.defineDual('test2', function(value,oldValue) {
      if (oldValue === undefined)
        console.log('first assign');
      console.log('state.test2 is',this.state.test2);
    });
```

setter 函数要求带两个参数，`value` 是赋予的新值，`oldValue` 是旧值，上例 `defineDual()` 调用，因未指定 `duals.test2` 的缺省值，所以它自动取 `undefined` 值，这时，我们可以用 `oldValue === undefined` 来判断当前是否为首次赋值。在注册 dual 属性所传入的 setter 函数中，`this` 正常可用，因为 `comp.defineDual()` 调用时，系统会自动将 setter 函数与当前节点捆绑（即调用 `setter.bind(comp)`）。

#### 双源属性的前置赋初值

在 `getInitialState()` 中调用 `this.defineDual()` 定义 `duals.attr` 后无法立即对 `this.state.attr` 赋值，因为此时 `this.state` 尚未就绪，只能等到首次 `render()` 调用时才真正赋值。比如下面 `duals.test2` 在定义后，紧接一条赋值语句：

``` js
    this.defineDual('test2', function(value,oldValue) {
      console.log(this.state.test2,value,oldValue);
    });
    this.duals.test2 = "hello";
```

系统自动缓存 `this.duals.test2 = "hello"` 语句，延后到首次 `render()` 时才执行。但假定当前构件还传入 `props.test2` 值，这时，`props.test2` 将被忽略，因为首次 render 之前对 `duals.attr` 赋值，除了延后执行，还会屏蔽同名 props 属性。

这种针对双源属性，被延后的赋值称为 **“前置赋初值”**，“前置赋初值”  为特定条件下忽略某个 props 传入值提供了可能。反之，如果上例没有 “前置赋初值”，我们传给 `props.test2` 的值为 `"abcd"`，首次 `render()` 时就会用 `this.duals.test2 = "abcd"` 进行初始化。

#### 一个特殊的双源属性：`"keyid"`

Shadow Widget 缺省为每个构件自动注册一个双源属性 keyid，它用来表示各节的 key 值。要求用 `duals.keyid` 取值，不能用 `state.keyid` 取值，另外，对 `duals.keyid` 赋值系统将报错，这保证了此属性是只读的。

#### 另一个特殊的双源属性：`"html."`

Shadow Widget 用 `"html."` 表达节点的文本值，如下两行转义标签效果等同：

``` html
  <div $=P html.='example'></div>
  <div $=P>example</div>
```

某节点只有未定义子节点时，`"html."` 指示的内容才被显示，比如下面只显示 “text”，`"html."` 指示的值并不显示，因为已存在一个 `Span` 子节点：

``` html
  <div $=P html.='example'><span $=Span>text</span></div>
```

 `"html."` 是系统内置的双源属性，运行中这么赋值：

``` html
  comp.duals['html.'] = 'example';
```

&nbsp;
