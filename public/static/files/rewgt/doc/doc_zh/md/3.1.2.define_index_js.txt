3.1.2 定制 index.js 入口
----------------

&nbsp;

上一节已给出空白工程入口模块 index.js 的代码，其中如下片断专供开发者定制：

``` js
// write your code here ...

var exportModules = {
  'react': React,
  'react-dom': ReactDOM,
  'shadow-widget': W,
};
```

我们既可以在 `"// write your code here ..."` 的下一行开始直接编写产品代码，也可用 `var my_module = require('./src/my_module')` 方式导入定义在外部的模块。两种方法均有效，我们建议采用后一种，因为模块化结构更清晰。

#### 配置对上层开放的模块

变量 `exportModules` 列出可供上层 require 的模块，比如，我们将上面代码改为：

``` js
// write your code here ...
var my_module = require('./src/my_module');

var exportModules = {
  'react': React,
  'react-dom': ReactDOM,
  'shadow-widget': W,
  'my_module': my_module,
};
```

这样，上层编写投影类定义时，经 `require('my_module')` 后就可以使用这个用户自定义的模块了。由于上层编码假定在 ES5 环境中进行，所以开放给上层的模块应尽可能用 ES5 风格编写。

#### 一个例子

比如我们要在自定义模块 `my_module.js` 中，定义一个移动鼠标在其上可高亮的按钮 `HighlightBtn`，界面这么描述：

``` html
  <span $=HighlightBtn>Click me</span>
```

接着，在 `my_module.js` 模块中定义这个构件模板类（Widget Template Class，WTC）：

``` js
var React = require('react');
var ReactDOM = require('react-dom');
var W = require('shadow-widget');

var T = W.$templates, utils = W.$utils, ex = W.$ex;

class THighlightBtn_ extends T.Button_ {
  constructor(name,desc) {
    super(name || 'HighlightBtn',desc);
  }

  $onMouseOver(event) {
    this.duals.style = {opacity:'0.6'};
  }
  
  $onMouseOut(event) {
    this.duals.style = {opacity:''};
  }
}

T.HighlightBtn_ = THighlightBtn_;
T.HighlightBtn = new THighlightBtn_();
```

上面源码见样例 `sample_dev1`。转义标签描述的构件要从 W.$template 模块（即上面的 `T`）查找，最后一条语句 `T.HighlightBtn = new THighlightBtn_()` 用于注册该 WTC 对象，语句 `T.HighlightBtn_ = THighlightBtn_` 则登记该 WTC，以便设计新的 WTC 时可以继承它。当然，如果某 WTC 没有被继承的价值，就不必登记到 `T` 模块中了。

现在运行 `sample_dev1` 工程，看看它的界面效果。在命令行终端，进入该工程目录，运行 `npm install` 安装本工程的依赖库（安装只做一次），然后运行 `npm start` 命令，watchify 随即启动修改侦测并转译 ES5 代码。当工程目录下 bundle.js 文件更新后，在浏览器中打开 `http://localhost:3000/sample_dev1/`，可检验一下界面运行效果。

#### 下层 WTC 与上层投影类的关系

本质上，投影类定义是对 WTC 的一种继承，近似于类继承。如果 WTC 定义完备了，上层无需对它再定制时，可以直接用它描述界面，而不必非得借助投影类定义。比如上例的 `HighlightBtn`，转义标签中直接使用 WTC 实例名。当然，如果上层想对它做定制，再定义投影类也无妨，针对同一 WTC 实例可定义任意个投影类，但在投影类之上，就不再有类继承关系了。

但 WTC 并不只为上层投影类及转义标签服务，后文 [“函数式开发”](#3.4.) 还会介绍让 WTC 实例结合 json-x 描述，以一种纯正函数式风格做开发，该方式不涉及投影类与转义标签。

澄清一下 WTC 的概念：WTC 是一种 class 类定义（形式为 `class OneWidget extends BaseWidget {}` ），可以继承它再定义新的 WTC，如 `class NewWidget extends OneWidget {}`，但，投影类继承基于 WTC 实例，WTC 实例化后才供上层投影类定制。所以，转义标签 `$=Widget` 指向的是 `T` 模块下的 WTC 类实例，而非 WTC 类自身。

&nbsp;
