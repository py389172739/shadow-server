2.2.6 事件驱动
----------------

&nbsp;

Shadow Widget 的事件化驱动，追根结底由 duals 双源属性的 setter 机制获得支持的，下面我们先进一步理解双源属性的若干特性。
 
#### 双源属性的 setter 具有继承能力

比如，任意构件的最底层类（即：位于投影类下层的 WTC 类）都已定义 `id__` 的 setter 函数，如下无关代码已用注释表示：

```
  this.defineDual('id__', function(value,oldValue) {
    // ...
  });
```

然后，在构件投影声明的 `getInitialState()` 中这么定义：

```
  this.defineDual('id__', function(value,oldValue) {
    if (oldValue == 1)
      console.log('it is first render');
  });
```

完成上述定义后，一次赋值 `duals.id__ = utils.identicalId()` 将依次触发上面两个 setter 函数，**越底层的 setter 越早被调用**。

接下来我们考察赋值语句 `comp.duals.attr = value` 如何执行，及多个 setter 对它的影响。

#### setter 被调之前系统自动判断是否有更新

对双源属性赋值时，系统先判断新值与旧值是否 “恒等”（即 `===`），若恒等就忽略后续处理（包括调用 setter 函数），即：自动忽略赋值操作。

某些时候，我们又希望每次赋值都触发动作，即便数据取值与旧值一样也要触发。不妨将该数据包上一层变化着的 ID 值，比如 `[data,ID]`，按如下方式赋值：

```
  comp.duals.notifyData = [data, ex.time()];
```

`ex.time()` 得到的是 “由当前时间转换而来的整数”，其值可标记界面操作的唯一 ID，这样，每次操作传递 `[data,ex.time()]` 都能触发本属性的 setter 函数了。

#### 在 setter 函数中校验与转换

执行 `comp.duals.attr = value`，系统判断 `value` 非旧值，然后自动完成 `comp.state.attr = value` 赋值，再调用 setter 函数，若有多层 setter，就从底向上依次调用。

各层 setter 函数调用中有 3 个值可用：参数 `value` 与 `oldValue`，及 `comp.state.attr`。前两者是赋值操作的新值与旧值，`comp.state.attr` 则是最终赋过去的值。在多层 setter 调用中，`comp.state.attr` 还用于表达校验后值，包括合法性校验（未通过就 `throw` 一个 `Error`）与数据自动转换（如把字串 `"5"` 转化为整数 `5`）。

各层 setter 函数可能要做不同的校验或转换，一般而言，越是底层 WTC 类，对输入数据取值范围要求越宽，越是上层继承类，越专注于特定应用，取值范围也越窄，校验若通不过应 `throw` 异常来终止操作，转换后若对原值产生修改，应直接赋改过的值给 `comp.state.attr`。各层 setter 调用中，`comp.state.attr` 取值是当前被赋的结果值，可能经过自动转换了，所以，它与参数 `value` 取值可能不同。

当 `comp.duals.attr = value` 赋值结束，最终触发注册的侦听函数时，传给侦听函数的 `value` 参数就是 `comp.state.attr`，它可能在 setter 函数中被转换过。

#### duals 立即赋值与延缓赋值

双源属性的 setter 函数只在各节点的 `render()` 函数入口处自动被调用，当某节点的 duals 属性的 setter 函数中，存在对自身节点的双源属性赋值的语句（`this.duals.attr = value`）时，被赋值属性的 setter 函数仍在当前节点 `render()` 入口处被调用，这是**“立即赋值”**。除了这种情况，其它双源属性赋值都将延缓到下一周期执行，这是**“延缓赋值”**。

延缓赋值具有强制数据单向流动的效果，它通过 “延后 0 秒再执行” 的方式实现，即，系统用如下语句实现：

```
  setTimeout( function() {
    // process here ...
  },0);
```

一句话概括上述规则就是：**双源属性的 setter 函数若被自身节点的（另一或同一）双源属性的 setter 驱动，它将跟随执行，否则延缓执行**。如果某双源属性的 setter 被对它自身赋值的语句所驱动，将产生递归调用，须小心避开无限递归。

调用 `listen()` 注册侦听后，当侦听源有变化，系统将自动触发特定动作，这时的 “触发” 也是 “延缓执行”。

#### 事件化驱动

在 Shadow Widget 中构造事件驱动机制，不需套用特别机制，把 duals 特性用上即可。把动作挂到事件源，只需 `listen()` 一个 duals 属性，主动卸离动作，调用 `unlisten()`。trigger 一个事件，如上面举值，用 `comp.duals.notifyData = [data, ex.time()]` 赋值语句，或者，为了让代码可读性更好，自行封装一个 `trigger` 方法：

```
  trigger: function(eventName,eventArg) {
    this.duals.notifyData = [eventName,eventArg,ex.time()];
  },
```

侦听（调用 `listen()`）宜在 `componentDidMount` 函数中进行，即使当前节点被 Unmount，然后又重新启用时，`listen()` 会自动被调用。

通常不必主动 `unlisten()`，当目标节点 unmount 时，凡在 `listen()` 登记时已指明目标节点的，都会自动删除侦听项目。listen 函数支持如下规格：

1. `source.listen(sAttr,target,sMethod)`，如果 sMethod 缺省，自动推导 camelCased 方法名
2. `source.listen([sAttr,sAttr2,...],target)`，自动推导目标节点的 camelCased 方法名
3. `source.listen(sAttr,target,sAttr2)`，串接两个 duals 属性
4. `source.listen(sAttr,callback)`，驱动 `callback(value,oldValue)` 函数

这 4 者中，前 3 者在 target 节点 unmount 时，能自动删除侦听项，最后一个因为直接驱动一个 callback 函数，无从识别 target，所以，要在 callback 函数中用 `if (!target.isHooked) return` 增加检查。

Shadow Widget 用 “可计算属性” 支持 “多个异步任务并发后再同步执行” 的机制，即：等待多个事件都触发后，才触发下一步动作。比如，属性定义 `$next='all:[duals.attr1,duals.attr2]'`  表示 attr1 与 attr2 均触发后才自动设置 `duals.next` 值，侦听这个 `duals.next` 可注册下一步要触发的动作。可计算属性将在 [后面章节](#2.5.) 详细介绍。

&nbsp;
