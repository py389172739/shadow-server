2.6.3 切换场景页
--------------

&nbsp;

#### 用 hash 导航切换场景页

如果定义了若干场景页，我们用 `#0` 、`#1` 等带 hash 参数的 URL 路径打开网页，指定的场景页将自动显示。比如 demo37 定义了 3 个场景页，在浏览器地址栏输入 `http://localhost:3000/demo37/#1`，打开网页后，自动选择第 2 个场景页显示，如果 hash 参数改用 `#2` 则显示第 3 个场景页，这里序号是从 0 开始编号的。

如果想在地址栏通过修改 hash 值随时跳转，增加如下 `window.onhashchange` 定义即可：

``` js
  window.onhashchange = function() {
    var sHash = window.location.hash;
    sHash = sHash? sHash.slice(1): '';

    if (sHash) {
      utils.gotoHash(decodeURIComponent(sHash), function(sRetHash) {
        if (sRetHash) {  // jump successful
          var sNewHash = '#' + sHash;
          if (window.location.hash != sNewHash)
            window.history.pushState(null,'',sNewHash);
        }
      });
    }
  };

  function jumpToHash(sHash) {
    window.open(sHash,'_self');
  }
```

URL 的 hash 参数若以 `'/'` 字符开始时，表示采用段路径导航（参见 [段路径](#2.3.2.)），否则采用场景页导航。

#### 命名场景页

命名场景页只需给 ScenePage 的 name 属性预设一个名称，如 demo37 将第 1 个场景页命名为 `"first_pg"`，第 3 个场景页命名为 `"third_pg"`。命名后 hash 导航就可以指定名称，而不是页序号了，比如打开 `http://localhost:3000/demo37/#third_pg` 将自动显示第 3 个场景页。

如果场景页经常增删，各页的序号随之变化，这时宜命名需跳转的 ScenePage，用名称导航就不受页序号变化的影响了。

#### 使用 utils.pageCtrl 接口

如果使用了 ScenePage 构件，系统初始化时自动在界面左边与右边各加一个边栏，点击边栏可以向前或向后翻页，同时，系统还自动注册一个 `utils.pageCtrl` 接口，用于编程时切换当前场景页，并提供左右边栏的样式定制。

pageCtrl 主要接口如下：

1. `gotoPage(page, callback)`，跳转到指定的场景页   
传入首参数为序号或场景页名称，次参数是跳转后供回调的函数，可缺省，callback 格式为 `callback(sRetHash)`，成功跳转时 `sRetHash` 为跳转路径，否则为空字串。
2. `setDisplay(config)`，用于设置左右边栏的显示样式   
比如：`utils.pageCtrl.setDisplay({leftCtrlWidth:0,rightCtrlWidth:0})` 将隐藏左右边栏。

有关 pageCtrl 更详细规格请参考 API 手册。

#### 跳到某场景页后再跳至指定段路径

在 hash 参数将跳转场景页的字串与指定段路径合起来写，即支持双重跳转，比如下面两个 URL 都可打开 demo37 样例：

```
    http://localhost:3000/demo37/#third_pg/b
    http://localhost:3000/demo37/#2/b
```

函数 `utils.pageCtrl.gotoPage(page,callback)` 中的 page，也支持上述双重跳转的表达方式。

&nbsp;
