3.5.3 自动化测试
----------------

&nbsp;

#### MVVM 框架中自动测试系统

由于 Shadow Widget 的 MVVM 框架实现了界面逻辑、展现逻辑、业务逻辑的良好分离（参见 [从 MVC 到 MVVM](#3.4.5.) ），我们很容构造一个不依赖界面实现，也不受 Model 数据约束的测试框架。

![MVVM](md/res/mvvm.jpg)

首先，**让 ViewModel 从界面显示剥离**。被测构件要保留预定义功能，但不显示界面元素，就像在命令行提供测试接口那样，界面不是必须的，不显示可避免干扰，也免得界面尚未实现时，程序跑不起来。

有两种方法可以做到这一点，方法一，在投影定义中，这么替换 render 函数：

``` js
  main['.body.top.p.btn'] = {
    render: function() {
      if (W.__debug__) {
        this._render(this);
        return null;
      }
      else return this._render(this);
    },
  };
```

上面代码增加 `W.__debug__` 判断，若在调测态，让本节点不显示界面。

方法二，或者用 `W.$dataSrc` 传递一个 render 函数，比如：

``` js
  var dataSrc = W.$dataSrc = {};
  
  function debugRender() {
    this._render(this);
    return null;
  }
  
  dataSrc['.body.top.p.btn'] = { render: debugRender };
```

其次，**仿真 Model 数据**。同样有两种方法，一是在源码中用 `W.__debug__` 识别调测态，追加特定的调测处理，二是用 `W.$dataSrc` 直接附加测试数据。

经过上述两种处理，ViewModel 就与它的上层与下层隔离开了，我们用 javascript 编写测试代码，让不易实施的界面测试也很容易做起来。

#### setup 与 teardown

在调试态，Shadow Widget 还额外支持 setup 与 teardown 过程调用。投影类中的 `setup__` 方法将在构件的首次 `render()` 时自动调用，而 `teardown__` 方法将在构件的 `componentWillUnmount()` 中自动调用。

举个简单例子：

``` js
  dataSrc['.body.top.p.btn'] = {
    'dual-msg': 'Hello, world!',
    render: debugRender,
    
    setup__: function() {
      console.log('in setup...');
    },
    
    teardown__: function() {
      console.log('in teardown...');
    },
  };
```

`setup__` 函数常用于初始化测试环境，`teardown__` 则常用于恢复测试环境，这两函数中的测试代码视需要编写。

&nbsp;
